husky::concat

Prototype
----------

template<typename Cont>
Cont concat(const Cont& l1, const Cont& l2);

Definition
----------

The concat function receives two containers with the same type values and returns a new container with the concatenation of both previous container elements.

Parameters
----------

l1
Const reference to a container that contains forward iterators.

l2
Const reference to a container that contains forward iterators.

Return value
------------

The result of concatenating l1 and l2 elements in a new container.

Example
--------

1) Define two supported containers and guarantee that their beginning and end iterators can be obtained (e.g. std::vector, std::list, std::array, int[]).
2) Call husky::concat with the specified arguments.


#include <iostream>     // std::cout
#include <vector>       // std::vector
#include "husky.h"

int main () {
  std::vector<int> v1 { 1, 2, 3, 4, 5 };
  std::vector<int> v2 { 6, 7, 8 };

  husky::printCont(husky::concat(v1, v2));
  husky::printCont(husky::concat(v2, v1));

  return 0;
}

Output:
[ 1 2 3 4 5 6 7 8 ]
[ 6 7 8 1 2 3 4 5 ]

Complexity
----------

Linear in the size of the containers.

Data Races
----------

The elements of the containers are accessed (each element is accessed exactly once).

Error Handling
--------------

Throws if an operation on an iterator throws.
Note that invalid arguments cause undefined behavior.

**************************************************************************************

husky::concat1

Prototype
----------

template<typename Cont>
Cont concat1(const Cont& l);

Definition
----------

The concat function receives a container that stores other containers and returns a new container which has all the elements of the containers inside the original container.

Parameters
----------

l
Const reference to a container that contains other containers as its elements

Return value
------------

The result of concatenating all elements in a single new container.

Example
--------

1) Define a supported container, guarantee that their beginning and end iterators can be obtained (e.g. std::vector, std::list, std::array, int[]) and populate it with other containers.
2) Call husky::concat1 with the specified argument.


#include <iostream>     // std::cout
#include <vector>       // std::vector
#include "husky.h"

int main () {
  std::vector<int> v1 { 1, 2, 3, 4, 5 };
  std::vector<int> v2 { 6, 7, 8 };

  std::vector<std::vector<int>> v3;
  v3.push_back(v1);
  v3.push_back(v2);

  husky::printCont(husky::concat1(v3));
  return 0;
}

Output:
[ 1 2 3 4 5 6 7 8 ]

Complexity
----------

O(m*n) where m is the size of the bigger container and n is the maximum size of one of its interior containers.

Data Races
----------

The interior containers and their elements are accessed (each element is accessed exactly once).

Error Handling
--------------

Throws if an operation on an iterator throws.
Note that invalid arguments cause undefined behavior.