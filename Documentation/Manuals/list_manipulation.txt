husky::take

Prototype
----------

template <typename Value, typename Cont>
std::vector<typename Cont::value_type> take(Value v, const Cont& c);

Definition
----------

The function take will select variable v, applied to a list c, 
returns the prefix of c of length v, or c itself if v > length c.
Follows the Haskel take function definition: take :: Int -> [a] -> [a]

Parameters
----------

v
A distinct integer for number of elements in the container

c
Any std container that uses forward iterators.

Return value
------------

A container with the number of elements given

Example
--------

1) Define a supported container that uses forward iterators (e.g. std::vector, std::list).
2) Give the number of elemets you want in the new container

 
#include <iostream>
#include <vector>
#include "husky.h"


int main () {
  
  	std::vector<int> sample = {1,2,3,4,5};
	for( auto x : sample) std::cout << x << " ";
	std << "\n";

	husky::printCont(husky::take(3, sample));

 	return 0;
}

Output:
1 2 3 4 5
[ 1 2 3 ]


Complexity
----------

Linear in the size of the container.

Data Races
----------

The elements in the container are accessed (each element may be accessed exactly once).

Error Handling
--------------

Throws if the operations on iterators throws.
Note that invalid arguments cause undefined behavior.


**************************************************************************************

husky::drop

Prototype
----------

template <typename Value, typename Cont>
std::vector<typename Cont::value_type> drop(Value v, const Cont& c);

Definition
----------

The function drop will return the suffix of c after the first v elements,
or [] if v > length c:
Follows the Haskel drop function definition: take :: Int -> [a] -> [a]

Parameters
----------

v
A distinct integer for number of elements in the container

c
Any std container that uses forward iterators.

Return value
------------

A container with the elements positioned in the original container after the given number v.

Example
--------

1) Define a supported container that uses forward iterators (e.g. std::vector, std::list).
2) Give the number of elemets you want in the new container

 
#include <iostream>
#include <vector>
#include "husky.h"

int main () {
  
  	std::vector<int> sample = {1,2,3,4,5};
	for( auto x : sample) std::cout << x << " ";

	husky::printCont(husky::drop(3, sample));

	std::cout<< std::endl;

 	return 0;
}

Output:
1 2 3 4 5
[ 4 5 ]


Complexity
----------

Linear in the size of the container.

Data Races
----------

The elements in the container are accessed (each element may be accessed exactly once).

Error Handling
--------------

Throws if the operations on iterators throws.
Note that invalid arguments cause undefined behavior.

**************************************************************************************

husky::reverse

Prototype
----------

template<typename Cont>
Cont reverse(const Cont& l);

Definition
----------

The reverse function receives a container and returns a container that contains the same elements as the original, but in reverse order.

Parameters
----------

l
Const reference to a container.

Return value
------------

A new container that is equal to the first one, except that its elements are in reverse order.

Example
--------

1) Define a supported container and populate it.
2) Call husky::reverse with the specified argument.


#include <iostream>     // std::cout
#include <vector>       // std::vector
#include "husky.h"

int main () {
  std::vector<int> v { 0, 1, 2, 3, 4, 5 };

  husky::printCont(husky::reverse(v));

  return 0;
}

Output:
[ 5 4 3 2 1 0 ]

Complexity
----------

Linear in the size of the container

Data Races
----------

The elements of the containers are accessed (each element is accessed exactly once).

Error Handling
--------------

Throws if an operation on an iterator throws.
Note that invalid arguments cause undefined behavior.

**************************************************************************************

husky::splitAt

Prototype
----------

template<typename Cont>
std::pair<std::vector<typename Cont::value_type>, std::vector<typename Cont::value_type>> splitAt(int n, const Cont& container)

Definition
----------

Returns a pair where first element is the container prefix of length n and second element is the remainder of the container. It is equivalent to (take n container, drop n container).

Parameters
----------

n
The index of where the split will be made

container
Const reference to a container.

Return value
------------

A pair of vectors, with the first one containing the prefix of length n and the second one storing the suffix of the original container

Example
--------

1) Define a supported container and populate it.
2) Call husky::splitAt with the specified argument.


#include <iostream>     // std::cout
#include <vector>       // std::vector
#include "husky.h"

int main () {
  std::vector<int> v { 0, 1, 2, 3, 4, 5 };

  auto p = husky::splitAt(3, v);
  husky::printCont(std::get<0>(p));
  husky::printCont(std::get<1>(p));

  return 0;
}

Output:
[ 0 1 2 ]
[ 3 4 5 ]

Complexity
----------

Linear in the size of the container

Data Races
----------

The elements of the containers are accessed (each element is accessed exactly once).

Error Handling
--------------

Throws if an operation on an iterator throws.
Note that invalid arguments cause undefined behavior.

