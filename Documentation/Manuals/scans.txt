husky::scanl

Prototype
----------

template<typename Cont, typename T, typename Function>
std::vector<T> scanl(Function f, T init, const Cont& l);

Definition
----------

The scanl function receives a container, an accumulator element and a binary function, and returns a vector with the results of successively applying the function to the accumulator and the container elements.

Parameters
----------

l
Const reference to the container that contains forward iterators.

init
Initial value for the accumulator.

f
Binary function that is applied to the accumulator and to an element from the container

Return value
------------

A vector with the results of successively applying the function to the accumulator and the container elements.

Example
--------

1) Define a supported container and guarantee that its beginning and end iterators can be obtained (e.g. std::vector, std::list, std::array, int[]).
2) Make sure the type of the elements in the container and the accumulator element have support for the function.
3) Call husky::scanl with the specified arguments 

#include <iostream>     // std::cout
#include <vector>       // std::vector
#include "husky.h"

int main () {
  std::vector<int> vec{ 1, 2, 3, 4, 5 };

  husky::printCont(husky::scanl(vec, 0, std::plus<int>()));

  husky::printCont(husky::scanl(vec, 1, std::multiplies<int>()));

  return 0;
}

Output:
[ 0 1 3 6 10 15 ]
[ 1 1 2 6 24 120 ]

Complexity
----------

Linear in the size of the container.

Data Races
----------

The elements in the container are accessed (each element is accessed exactly once).

Error Handling
--------------

Throws if any of the function, the assignments or an operation on an iterator throws.
Note that invalid arguments cause undefined behavior.

**************************************************************************************

husky::scanl1

Prototype
----------

template<typename Function, typename Cont>
typename Cont::value_type scanl1(Function f, const Cont& l);

Definition
----------

The scanl1 function receives a container and a binary function, and returns a vector with the results of successively applying the function to the container elements.

Parameters
----------

l
Const reference to the container that contains forward iterators.

f
Binary function that is applied to the accumulator and to an element from the container

Return value
------------

A vector with the results of successively applying the function to the container elements.

Example
--------

1) Define a supported container and guarantee that its beginning and end iterators can be obtained (e.g. std::vector, std::list, std::array, int[]).
2) Make sure the type of the elements in the container have support for the function.
3) Call husky::scanl1 with the specified arguments 

#include <iostream>     // std::cout
#include <vector>       // std::vector
#include "husky.h"

int main () {
  std::vector<int> vec{ 1, 2, 3, 4, 5 };

  std::cout << husky::scanl1(vec, std::plus<int>());
  std::cout << '\n';

  std::cout << husky::scanl1(vec, std::multiplies<int>());
  std::cout << '\n';

  return 0;
}

Output:
[ 1 3 6 10 15 ]
[ 1 2 6 24 120 ]

Complexity
----------

Linear in the size of the container.

Data Races
----------

The elements in the container are accessed (each element is accessed exactly once).

Error Handling
--------------

Throws if any of the function, the assignments or an operation on an iterator throws.
Note that invalid arguments cause undefined behavior.


**************************************************************************************

husky::scanr

Prototype
----------

template<typename Function, typename Cont, typename T>
T scanr(Function f, T init, const Cont& l);

Definition
----------

The scanr function, applied to a binary operator, a starting value (typically the right-identity of the operator), and a list, reduces the list using the binary operator, from right to left, and returns a vector with the reducing results.

Parameters
----------

l
Const reference to the container that contains forward iterators.

init
Initial value for the accumulator.

f
Binary function that is applied to the accumulator and to an element from the container

Return value
------------

A vector with the results of successively applying the function to the accumulator and the container elements, from right to left.

Example
--------

1) Define a supported container and guarantee that its beginning and end iterators can be obtained (e.g. std::vector, std::list, std::array, int[]).
2) Make sure the type of the elements in the container and the accumulator element have support for the function.
3) Call husky::scanr with the specified arguments 

#include <iostream>     // std::cout
#include <vector>       // std::vector
#include "husky.h"

int main () {
  std::vector<int> vec{ 1, 2, 3, 4, 5 };

  std::cout << husky::scanr(vec, 0, std::plus<int>());
  std::cout << '\n';

  std::cout << husky::scanr(vec, 0, std::minus<int>());
  std::cout << '\n';

  return 0;
}

Output:
[ 15 10 6 3 1 0 ]
[ -15 -10 -6 -3 -1 0 ]

Complexity
----------

Linear in the size of the container.

Data Races
----------

The elements in the container are accessed (each element is accessed exactly once).

Error Handling
--------------

Throws if any of the function, the assignments or an operation on an iterator throws.
Note that invalid arguments cause undefined behavior.

**************************************************************************************

husky::scanr1

Prototype
----------

template<typename Function, typename Cont>
typename Cont::value_type scanr1(const Cont& container, Function f);

Definition
----------

The scanr1 function receives a container and a binary function, and returns a vector with the results of successively applying the function to the container elements, from right to left.

Parameters
----------

container
Const reference to the container that contains forward iterators.

f
Binary function that is applied to the accumulator and to an element from the container

Return value
------------

A vector with the results of successively applying the function to the container elements, from right to left.

Example
--------

1) Define a supported container and guarantee that its beginning and end iterators can be obtained (e.g. std::vector, std::list, std::array, int[]).
2) Make sure the type of the elements in the container have support for the function.
3) Call husky::scanr1 with the specified arguments 

#include <iostream>     // std::cout
#include <vector>       // std::vector
#include "husky.h"

int main () {
  std::vector<int> vec{ 1, 2, 3, 4, 5 };

  std::cout << husky::scanr1(vec, std::minus<int>());
  std::cout << '\n';

  std::cout << husky::scanr1(vec, std::multiplies<int>());
  std::cout << '\n';

  return 0;
}

Output:
[ -5 -4 -2 1 5 ]
[ 120 120 60 20 5 ]

Complexity
----------

Linear in the size of the container.

Data Races
----------

The elements in the container are accessed (each element is accessed exactly once).

Error Handling
--------------

Throws if any of the function, the assignments or an operation on an iterator throws.
Note that invalid arguments cause undefined behavior.