husky::foldl

Prototype
----------

template<typename Function, typename Cont, typename T>
T foldl(const Cont& container, T init, Function f);

Definition
----------

The foldl function receives a container, an accumulator element and a binary function, and accumulates the result of successively applying the function to the accumulator and the container elements, returning the final result.

Parameters
----------

container
Const reference to the container that contains forward iterators.

init
Initial value for the accumulator.

f
Binary function that is applied to the accumulator and to an element from the container

Return value
------------

The result of successively applying the function to the accumulator and the container elements.

Example
--------

1) Define a supported container and guarantee that its beginning and end iterators can be obtained (e.g. std::vector, std::list, std::array, int[]).
2) Make sure the type of the elements in the container and the accumulator element have support for the function.
3) Call husky::foldl with the specified arguments 

#include <iostream>     // std::cout
#include <vector>       // std::vector
#include "husky.h"

int main () {
  std::vector<int> vec{ 1, 2, 3, 4, 5 };

  std::cout << husky::foldl(vec, 0, std::plus<int>());
  std::cout << '\n';

  std::cout << husky::foldl(vec, 1, std::multiplies<int>());
  std::cout << '\n';

  return 0;
}

Output:
15
120

Complexity
----------

Linear in the size of the container.

Data Races
----------

The elements in the container are accessed (each element is accessed exactly once).

Error Handling
--------------

Throws if any of the function, the assignments or an operation on an iterator throws.
Note that invalid arguments cause undefined behavior.

**************************************************************************************

husky::foldl1

Prototype
----------

template<typename Function, typename Cont>
typename Cont::value_type foldl1(const Cont& container, Function f);

Definition
----------

The foldl1 function receives a container and a binary function, and accumulates the result of successively applying the function to the container elements, returning the final result.

Parameters
----------

container
Const reference to the container that contains forward iterators.

f
Binary function that is applied to the accumulator and to an element from the container

Return value
------------

The result of successively applying the function to the container elements.

Example
--------

1) Define a supported container and guarantee that its beginning and end iterators can be obtained (e.g. std::vector, std::list, std::array, int[]).
2) Make sure the type of the elements in the container have support for the function.
3) Call husky::foldl1 with the specified arguments 

#include <iostream>     // std::cout
#include <vector>       // std::vector
#include "husky.h"

int main () {
  std::vector<int> vec{ 0, 1, 2, 3, 4, 5 };

  std::cout << husky::foldl1(vec, std::plus<int>());
  std::cout << '\n';

  std::cout << husky::foldl1(vec, std::multiplies<int>());
  std::cout << '\n';

  return 0;
}

Output:
15
0

Complexity
----------

Linear in the size of the container.

Data Races
----------

The elements in the container are accessed (each element is accessed exactly once).

Error Handling
--------------

Throws if any of the function, the assignments or an operation on an iterator throws.
Note that invalid arguments cause undefined behavior.


**************************************************************************************

husky::foldr

Prototype
----------

template<typename Function, typename Cont, typename T>
T foldr(const Cont& container, T init, Function f);

Definition
----------

The foldr function, applied to a binary operator, a starting value (typically the right-identity of the operator), and a list, reduces the list using the binary operator, from right to left, and returns the final result.

Parameters
----------

container
Const reference to the container that contains forward iterators.

init
Initial value for the accumulator.

f
Binary function that is applied to the accumulator and to an element from the container

Return value
------------

The result of successively applying the function to the accumulator and the container elements.

Example
--------

1) Define a supported container and guarantee that its beginning and end iterators can be obtained (e.g. std::vector, std::list, std::array, int[]).
2) Make sure the type of the elements in the container and the accumulator element have support for the function.
3) Call husky::foldr with the specified arguments 

#include <iostream>     // std::cout
#include <vector>       // std::vector
#include "husky.h"

int main () {
  std::vector<int> vec{ 1, 2, 3, 4, 5 };

  std::cout << husky::foldr(vec, 0, std::plus<int>());
  std::cout << '\n';

  std::cout << husky::foldr(vec, 0, std::minus<int>());
  std::cout << '\n';

  return 0;
}

Output:
15
-15

Complexity
----------

Linear in the size of the container.

Data Races
----------

The elements in the container are accessed (each element is accessed exactly once).

Error Handling
--------------

Throws if any of the function, the assignments or an operation on an iterator throws.
Note that invalid arguments cause undefined behavior.

**************************************************************************************

husky::foldr1

Prototype
----------

template<typename Function, typename Cont>
typename Cont::value_type foldr1(const Cont& container, Function f);

Definition
----------

The foldr1 function receives a container and a binary function, and accumulates the result of successively applying the function to the container elements, returning the final result, from right to left.

Parameters
----------

container
Const reference to the container that contains forward iterators.

f
Binary function that is applied to the accumulator and to an element from the container

Return value
------------

The result of successively applying the function to the container elements.

Example
--------

1) Define a supported container and guarantee that its beginning and end iterators can be obtained (e.g. std::vector, std::list, std::array, int[]).
2) Make sure the type of the elements in the container have support for the function.
3) Call husky::foldr1 with the specified arguments 

#include <iostream>     // std::cout
#include <vector>       // std::vector
#include "husky.h"

int main () {
  std::vector<int> vec{ 1, 2, 3, 4, 5 };

  std::cout << husky::foldr1(vec, std::minus<int>());
  std::cout << '\n';

  std::cout << husky::foldr1(vec, std::multiplies<int>());
  std::cout << '\n';

  return 0;
}

Output:
-5
120

Complexity
----------

Linear in the size of the container.

Data Races
----------

The elements in the container are accessed (each element is accessed exactly once).

Error Handling
--------------

Throws if any of the function, the assignments or an operation on an iterator throws.
Note that invalid arguments cause undefined behavior.

**************************************************************************************

husky::any_fold

Prototype
----------

template<typename Cont, typename Pred>
bool any_fold(const Cont& container, Pred predicate);

Definition
----------

The any_fold function receives a container and a predicate, and returns true if any value in the given container fits the predicate.

Parameters
----------

container
A std container that uses forward iterators.

predicate
Unary function that accepts an element in the range as argument, and returns a value 
convertible to bool. The value returned indicates whether the element satisfies the predicate or not.

Return value
------------

true if any of the elements in the container satisfies the predicate, false otherwise.

Example
--------

1) Define a supported container that uses forward iterators (e.g. std::vector, 
std::list).
2) Call husky::any_fold with the specified arguments, remembering to pass in a 
predicate function

 
#include <iostream>          
#include <vector>
#include "husky.h"


bool isOdd (int i) { return ((i%2)==1); }

int main () {
  
  std::vector<int> v1 { 1, 2, 3, 4, 5, 6, 7, 8, 9};
  std::vector<int> v2 { 0, 2, 4, 6 };

  std::cout << husky::any_fold(v1, isOdd);
  std::cout << husky::any_fold(v2, isOdd);

  return 0;
}

Output:
true
false

Complexity
----------

Linear in the size of the container.

Data Races
----------

Some (or all) the objects in the container are accessed (each element is accessed at most once).

Error Handling
--------------

Throws if either pred or an operation on an iterator throws.
Note that invalid parameters cause undefined behavior.

**************************************************************************************

husky::all_fold

Prototype
----------

template<typename Cont, typename Pred>
bool all_fold(const Cont& container, Pred predicate);

Definition
----------

The all_fold function receives a container and a predicate, and returns true if all the values in the given container fit the predicate.

Parameters
----------

container
A std container that uses forward iterators.

predicate
Unary function that accepts an element in the range as argument, and returns a value 
convertible to bool. The value returned indicates whether the element satisfies the predicate or not.

Return value
------------

true if all the elements in the container satisfy the predicate, false otherwise.

Example
--------

1) Define a supported container that uses forward iterators (e.g. std::vector, 
std::list).
2) Call husky::all_fold with the specified arguments, remembering to pass in a 
predicate function

 
#include <iostream>          
#include <vector>
#include "husky.h"


bool isOdd (int i) { return ((i%2)==1); }

int main () {
  
  std::vector<int> v1 { 1, 3, 5, 7, 9};
  std::vector<int> v2 { 0, 1, 3, 5 };

  std::cout << husky::all_fold(v1, isOdd);
  std::cout << husky::all_fold(v2, isOdd);

  return 0;
}

Output:
true
false

Complexity
----------

Linear in the size of the container.

Data Races
----------

Some (or all) the objects in the container are accessed (each element is accessed at most once).

Error Handling
--------------

Throws if either pred or an operation on an iterator throws.
Note that invalid parameters cause undefined behavior.
