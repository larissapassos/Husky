--- Sample Specification and Tutorial ----

functionalibrary::product

Prototype
----------
template<typename Iterator, typename T>
T product(Iterator first, Iterator last, T init);

Definition
----------

The product function computes the product of the elements in a given container. Value is calculated iteratively and accumulated on an accumulator variable, with initial value defined by the init parameter.

Parameters
----------
first, last
Input iterators to the initial and final positions in a sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.

init
Initial value for the accumulator. Most common value used is 1.

Return value
------------
The result of multiplying init and all the elements in the range [first,last).

Tutorial
--------

1) Define a supported container and guarantee that its beginning and end iterators can be obtained (e.g. std::vector, std::list, std::array, int[]).
2) Make sure the type of the elements in the container have support for multiplication (i.e. operator*).
3) Call functionalibrary::product with the specified arguments, remembering to define a starting value

In the example code given, the second call to functionalibrary::product used -1 as a starting value. This results in the multiplication of the container elements
having its value inverted. 

#include <iostream>     // std::cout
#include <vector>       // std::vector

int main () {
  std::vector<int> vec{ 1, 2, 3, 4, 5 };

  std::cout << functionalibrary::product(vec.begin(), vec.end(), 1);
  std::cout << '\n';

  std::cout << functionalibrary::product(vec.begin(), vec.end(), -1);
  std::cout << '\n';

  return 0;
}

Output:
120
-120

Complexity
----------

Linear in the distance between first and last iterators.

Data Races
----------

The elements in the range [first,last) are accessed (each element is accessed exactly once).

Error Handling
--------------
Throws if any of std::multipkies, the assignments or an operation on an iterator throws.
Note that invalid arguments cause undefined behavior.
